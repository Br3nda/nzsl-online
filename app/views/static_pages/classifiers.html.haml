.typography.rule_after
  :markdown
    Classifiers
    ===========
    
    * [Size and Shape Specifiers (SASS)](#sass)
    * [Texture, consistency and quality classifiers](#texture)
    * [Entity classifiers](#entity)
    * [Body parts classifiers](#body_part)
    * [Mass or quantity classifiers](#mass)
    * [Handling or instrumental classifiers](#handling)
    * [Element classifiers](#element)
  = link_to "", "/videos/classifiers.mp4", :class => 'video_replace main_video'
  :markdown
    Most of the signs in this dictionary are &lsquo;frozen&rsquo; or established signs; that is, they are formed
    and used in predictable ways. But the lexicon of NZSL is greatly expanded by the flexible
    combination of certain handshapes and movements to represent objects, actions, and visual
    properties of things and situations. These more creative sign formations are found in most
    natural signed languages, and they are known as &lsquo;classifiers&rsquo; or productive lexicon. Because
    the exact form and meaning of such signs is specific to a particular context of use and
    therefore variable, they cannot be recorded as regular entries in the dictionary.

    Classifier signs describe and/or represent a noun by depicting its semantic or visual
    features. For instance, objects that are flat and round (eg, a coin), straight and thin (eg,
    a picture frame), or spherical (eg, the earth) are represented by handshapes that are
    manipulated in space to represent a feature of the object&rsquo;s appearance, size and location.
    Instrumental or handling classifiers represent how an object is used, with the handshape
    reflecting something about the object&rsquo;s shape or how it is held, and the movement showing
    how it is used (eg, unscrewing a lid or turning a knob).

    Certain classifier handshapes represent closed semantic categories, such as &lsquo;vehicle&rsquo;,
    or &lsquo;person&rsquo;, and these are also used like a pronoun that can be moved to incorporate a verb
    of motion and location. For example, a flat open handshape with the blade down represents
    a vehicle, and can be moved in an upward-sloping, zig-zag motion to express &lsquo;a car driving
    up a steep winding road&rsquo;. These complex classifier constructions that incorporate an entity
    and an action are also known as &lsquo;pro-forms&rsquo;.

    Number and quantity is expressed in some classifiers by a change or reduplication of
    handshape; eg, three upright fingers moving forward, rather than one, can stand for three
    persons walking, or two hands can be used to arrange multiple objects in space - eg, two
    palm-down claw handshapes side by side can represent two or more houses next to each
    other. Often, two hands are used simultaneously in classifier constructions, with each hand
    representing parts of the same entity, or two different entities that relate to each other in
    space (eg, a car parked under a roof, a bird on a rock, two people sitting opposite, a train
    entering a tunnel).
  %p
    Classifiers are a productive source of new vocabulary creation in signed languages, as they
    can be used to represent new nouns (eg, #{link_sign 'mobile phone', 5581}, activities (eg, #{link_sign 'bungy-jump', 6066}), and
    other concepts. Many signs in the established dictionary lexicon that reflect shape or action
    originate in classifiers, such as #{link_sign 'table', 834}, #{link_sign 'hammer', 3846}, #{link_sign 'plate', 5666}, #{link_sign 'jump', 2974}, #{link_sign 'meet', 2461}, #{link_sign 'assertive', 2405}.
  :markdown
    Frequently used NZSL classifier handshapes are shown in these pages, according to
    categories of meaning.
.typography
  %h2 Classifier types
  %h3#sass Classifiers for specifying size and shape (Size and Shape Specifiers (SASS))
  %p.note These handshapes describe how objects look, and/or how they are arranged.
= render :partial => 'static_pages/grid', :locals => {:group => classifiers[:sass]}
.typography
  %h3#texture Texture, consistency, and quality classifiers
  %p.note These handshapes describe how things feel or look.
= render :partial => 'static_pages/grid', :locals => {:group => classifiers[:texture_consistency]}
.typography
  %h3#entity Entity classifiers
  %p.note These handshapes always represent a specific kind of object; e.g. vehicle, person, legs, plane. They are proforms that function as noun and verb combined.
- classifiers[:entity].each_with_index do |value, i|
  %h4= value.first
  = render :partial => 'static_pages/grid', :locals => {:group => value.last, :no_rule_after => (i != classifiers[:entity].length - 1)}
.typogarphy
  %h3#body_part Body parts classifiers
  %p.note These handshapes describe moveable body parts including: legs, arms, head, feet, eyes, hair, ears, penis, eyebrows, mouth, tongue, buttocks, etc. For animals &mdash; paws, tail, whiskers, claws, wings, beak. These can function as proforms incorporating noun and verb.
= render :partial => 'static_pages/grid', :locals => {:group => classifiers[:body_parts]}
.typography
  %h3#mass Mass or quantity classifiers
  %p.note These handshapes show groups, numbers, and arrangements of objects; e.g. a line of people or trees, a queue of traffic, an audience of people, masses of sheep, a pile of something, rows of chairs, masses of stars.
= render :partial => 'static_pages/grid', :locals => {:group => classifiers[:mass_or_quantity]}
.typography
  %h3#handling Handling or instrumental classifiers
  %p.note These handshapes describe how an object is handled and its shape, e.g. cutting with a knife, holding paper, lifting a board, using a tool, carrying a bag, pulling a rope, pushing a car, twisting a jar lid.
= render :partial => 'static_pages/grid', :locals => {:group => classifiers[:handling_or_instrumental]}
.typography
  %h3#element Element classifiers
  %p.note These proforms describe the appearance and movement of the elements of fire, water, and air.
- classifiers[:element].each_with_index do |value, i|
  %h4= value.first
  = render :partial => 'static_pages/grid', :locals => {:group => value.last, :no_rule_after => (i != classifiers[:element].length - 1)}